#include "src/headers/dic.h"
#include <QFile>
#include <QDebug>
#include <vector>
#include <cstdlib>

Dic::Dic()
{
    currentImagesCount = 0;
}

void Dic::setReferenceImage(const cv::Mat matrix)
{
    referenceImage = matrix;
}

void Dic::setROI(cv::Mat matrix)
{
    roi = matrix;
}

void Dic::performDicAnalysis()
{
    double *p;
    std::vector<std::pair<double, double> >::iterator it;
    subsetRadius = 5.0f;
    subsetSpacing = 12.0f;
    threshold = 1e-6;
    maxIter = 50;
    preCompute();
    populateSubsetCentres();

    for (it = subsetCentres.begin(); it != subsetCentres.end(); it++) {
        p = (double *) std::calloc(6, sizeof(double));
        calcParam(it->first, it->second, p, currentImages[0]);
        params.push_back(p);
    }
}

void Dic::calcParam(int x, int y, double * p, cv::Mat curr)
{
    int i;
    int j;
    int iterations = 0;
    cv::Mat F;
    cv::Mat G;
    F = cv::Mat::zeros(2 * subsetRadius, 2 * subsetRadius, referenceImage.type());
    G = cv::Mat::zeros(2 * subsetRadius, 2 * subsetRadius, referenceImage.type());
    for (i = 0; i < 6; i++) {
        p[i] = 0.0f;
    }
    // F <- ref subset
    // G <- curr subset
    for (iterations = 0; iterations < maxIter && normDiff(F, G) > threshold; iterations++) {

    }
}

double Dic::normDiff(cv::Mat A, cv::Mat B)
{
    return 100.0f;
}

void Dic::populateSubsetCentres()
{
    // TODO: consider roi
    unsigned int x;
    unsigned int y;
    for (y = subsetRadius; y + subsetRadius< referenceImage.rows; y += subsetSpacing) {
        for (x = subsetRadius; x + subsetRadius< referenceImage.cols; x += subsetSpacing) {
            subsetCentres.push_back(std::make_pair(x, y));
        }
    }
}

void Dic::preCompute()
{
    refImgBcoeff = cv::Mat::zeros(referenceImage.rows + 10,
            referenceImage.cols + 10, CV_32FC1);
    refImgGradX = cv::Mat::zeros(referenceImage.rows,
            referenceImage.cols, referenceImage.type());
    refImgGradY = cv::Mat::zeros(referenceImage.rows,
            referenceImage.cols, referenceImage.type());
    computeBcoefGrad(referenceImage,
            refImgBcoeff, refImgGradX, refImgGradY);
    refQK_B_QKT = (double *) calloc(referenceImage.rows * referenceImage.cols* 36, sizeof(double));
    computeQK_B_QKT(referenceImage, refImgBcoeff, refQK_B_QKT);
    calcHessian();
}

void Dic::calcHessian()
{
    // TODO: complete me
}


void Dic::setCurrentImages(int n, cv::Mat *list)
{
    currentImagesCount = n;
    currentImages = list;
}

void Dic::computeBcoefGrad(cv::Mat img, cv::Mat bcoeff, 
        cv::Mat gradX, cv::Mat gradY)
{
    int b_cols;	/* number of columns of b coeff matrix */
    int b_rows;	/* number of rows of b coeff matrix */
    int ri_cols;	/* number of columns of reference image */
    int ri_rows;	/* number of rows of reference image */
    int i;
    int j;
    int k;
    std::vector<float> ker_x;
    std::vector<std::complex<float> > ker_x_fft; /* stores result of fourier on ker_x */
    std::vector<std::complex<float> > row_fft; /* stores resulf of fourier on a row */
    qDebug() << "Starting";
    cv::Mat bcoeff_t;	/* transpose of b coeff matrix */
    int bt_cols;	/* number of columns of b coeff transpose matrix*/
    int bt_rows;

    ri_cols = img.cols;
    ri_rows = img.rows;
    b_rows = ri_rows + 10;	/* padding is 5 pixel on each side */
    b_cols = ri_cols + 10;
    qDebug("%d %d %d %d\n", ri_cols, ri_rows, b_rows, b_cols);
    /*corners*/
    for (i = 0; i < 5; i++) {
        for (j = 0; j < 5; j++) {
            bcoeff.at<float>(i, j) = (float) img.at<uchar>(0, 0);
            bcoeff.at<float>(i, b_cols - 1 - j) = (float) img.at<uchar>(0, ri_cols - 1);
            bcoeff.at<float>(b_rows - 1 - i, j) = (float) img.at<uchar>(ri_rows - 1, 0);
            bcoeff.at<float>(b_rows - 1 - i, b_rows - 1 - j) = (float) img.at<uchar>(ri_rows - 1, ri_cols - 1);
        }
    }

    /*sides*/
    for (k = 0; k < 5; k++) {
        /* horizontal sides*/
        for (j = 5; j < b_cols - 5; j++) {
            bcoeff.at<float>(k, j) = (float) img.at<uchar>(0, j - 5);
            bcoeff.at<float>(b_rows - 1 - k, j) = (float) img.at<uchar>(ri_rows - 1, j - 5);
        }

        /* vertical sides */
        for (i = 5; i < b_rows - 5; i++) {
            bcoeff.at<float>(i, k) = (float) img.at<uchar>(i - 5, 0);
            bcoeff.at<float>(i, b_cols - 1 - k) = (float) img.at<uchar>(i - 5, ri_cols - 1);
        }
    }

    for (i = 5; i < b_rows - 5; i++) {
        for (j = 5; j < b_cols; j++) {
            bcoeff.at<float>(i, j) = (float) img.at<uchar>(i - 5, j - 5);
        }
    }

    ker_x.push_back(11.0f / 20.0f);
    ker_x.push_back(13.0f / 60.0f);
    ker_x.push_back(1.0f / 120.0f);
    for (i = 3; i < b_cols - 2; i++) {
        ker_x.push_back(0.0f);
    }
    ker_x.push_back(1.0f / 120.0f);
    ker_x.push_back(13.0f / 60.0f);

    cv::dft(ker_x, ker_x_fft, cv::DFT_ROWS|cv::DFT_COMPLEX_OUTPUT);
    for (i = 0; i < b_rows; i++) {
        cv::dft(bcoeff.row(i), row_fft, cv::DFT_ROWS|cv::DFT_COMPLEX_OUTPUT);
        for (j = 0; j < b_cols; j++) {
            row_fft[j] /= ker_x_fft[j];
        }
        cv::dft(row_fft, bcoeff.row(i), cv::DFT_INVERSE|cv::DFT_ROWS|cv::DFT_REAL_OUTPUT);
    }

    ker_x.clear();
    ker_x_fft.clear();
    row_fft.clear();
    cv::transpose(bcoeff, bcoeff_t);
    bt_cols = b_rows;
    bt_rows = b_cols;

    ker_x.push_back(11.0f / 20.0f);
    ker_x.push_back(13.0f / 60.0f);
    ker_x.push_back(1.0f / 120.0f);
    for (i = 3; i < bt_cols - 2; i++) {
        ker_x.push_back(0.0f);
    }
    ker_x.push_back(1.0f / 120.0f);
    ker_x.push_back(13.0f / 60.0f);
    cv::dft(ker_x, ker_x_fft, cv::DFT_ROWS|cv::DFT_COMPLEX_OUTPUT);
    for (i = 0; i < bt_rows; i++) {
        cv::dft(bcoeff_t.row(i), row_fft, cv::DFT_ROWS|cv::DFT_COMPLEX_OUTPUT);
        for (j = 0; j < bt_cols; j++) {
            row_fft[j] /= ker_x_fft[j];
        }
        cv::dft(row_fft, bcoeff_t.row(i), cv::DFT_INVERSE|cv::DFT_ROWS|cv::DFT_REAL_OUTPUT);
    }
    cv::transpose(bcoeff_t, bcoeff);
    /*======== Done B coefficients =======================================*/
    gradX = cv::Mat::zeros(ri_rows, ri_cols, img.type());
    gradY = cv::Mat::zeros(ri_rows, ri_cols, img.type());
    for (i = 2; i < b_cols - 8; i++) {
        for (j = 2; j < b_rows - 8; j++) {
            float b0 = bcoeff.at<float>(j,i);
            float b1 = bcoeff.at<float>(j,i);
            float b2 = bcoeff.at<float>(j+1,i);
            float b3 = bcoeff.at<float>(j+2,i);
            float b4 = bcoeff.at<float>(j+3,i);
            float b5 = bcoeff.at<float>(j+4,i);
            float b6 = bcoeff.at<float>(j,i+1);
            float b7 = bcoeff.at<float>(j,i+1);
            float b8 = bcoeff.at<float>(j+1,i+1);
            float b9 = bcoeff.at<float>(j+2,i+1);
            float b11 = bcoeff.at<float>(j+3,i+1);
            float b10 = bcoeff.at<float>(j+4,i+1);
            float b12 = bcoeff.at<float>(j,i+2);
            float b13 = bcoeff.at<float>(j,i+2);
            float b14 = bcoeff.at<float>(j+1,i+2);
            float b15 = bcoeff.at<float>(j+2,i+2);
            float b16 = bcoeff.at<float>(j+3,i+2);
            float b17 = bcoeff.at<float>(j+4,i+2);
            float b18 = bcoeff.at<float>(j,i+3);
            float b19 = bcoeff.at<float>(j,i+3);
            float b20 = bcoeff.at<float>(j+1,i+3);
            float b21 = bcoeff.at<float>(j+2,i+3);
            float b22 = bcoeff.at<float>(j+3,i+3);
            float b23 = bcoeff.at<float>(j+4,i+3);
            float b24 = bcoeff.at<float>(j,i+4);
            float b25 = bcoeff.at<float>(j,i+4);
            float b26 = bcoeff.at<float>(j+1,i+4);
            float b27 = bcoeff.at<float>(j+2,i+4);
            float b28 = bcoeff.at<float>(j+3,i+4);
            float b29 = bcoeff.at<float>(j+4,i+4);
            float b30 = bcoeff.at<float>(j,i+5);
            float b31 = bcoeff.at<float>(j,i+5);
            float b32 = bcoeff.at<float>(j+1,i+5);
            float b33 = bcoeff.at<float>(j+2,i+5);
            float b34 = bcoeff.at<float>(j+3,i+5);
            float b35 = bcoeff.at<float>(j+4,i+5);

            gradX.at<uchar>(j - 2, i - 2) = (uchar) (0.003472222222222222*b18-0.009027777777777778*b1-0.003472222222222222*b10-0.0003472222222222222*b0+0.09027777777777778*b19-0.02291666666666667*b2+0.2291666666666667*b20+0.09027777777777778*b21+0.003472222222222222*b22+0.0003472222222222222*b24+0.009027777777777778*b25+0.02291666666666667*b26+0.009027777777777778*b27+0.0003472222222222222*b28-0.009027777777777778*b3-0.0003472222222222222*b4-0.003472222222222222*b6-0.09027777777777778*b7-0.2291666666666667*b8-0.09027777777777778*b9);
            gradY.at<uchar>(j - 2, i - 2) =(uchar) (0.009027777777777778*b10-0.003472222222222222*b1-0.0003472222222222222*b0-0.02291666666666667*b12-0.2291666666666667*b13+0.2291666666666667*b15+0.02291666666666667*b16-0.009027777777777778*b18-0.09027777777777778*b19+0.09027777777777778*b21+0.009027777777777778*b22-0.0003472222222222222*b24-0.003472222222222222*b25+0.003472222222222222*b27+0.0003472222222222222*b28+0.003472222222222222*b3+0.0003472222222222222*b4-0.009027777777777778*b6-0.09027777777777778*b7+0.09027777777777778*b9);
        }
    }

    QFile dumpbcoeff("/tmp/dicdump-bcoeff.txt");
    if (!dumpbcoeff.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qDebug("bcoeff returning");
        return;
    }

    QTextStream outbCoeff(&dumpbcoeff);
    for (i = 0; i < b_rows; i++) {
        for (j = 0; j < b_cols; j++) {
            outbCoeff << bcoeff.at<float>(i, j) << "\t";
        }
        outbCoeff << "\n";
    }
    dumpbcoeff.close();

    QFile dumpGradX("/tmp/dicdump-gradX");
    if (!dumpGradX.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qDebug("gradx returning");
        return;
    }

    QTextStream outGradX(&dumpGradX);
    for (i = 0; i < ri_rows; i++) {
        for (j = 0; j < ri_cols; j++) {
            outGradX << gradX.at<float>(i, j) << "\t";
        }
        outGradX << "\n";
    }
    dumpGradX.close();


    QFile dumpGradY("/tmp/dicdump-gradY");
    if (!dumpGradY.open(QIODevice::WriteOnly | QIODevice::Text)) {
        qDebug("grady returning");
        return;
    }

    QTextStream outGradY(&dumpGradY);
    for (i = 0; i < ri_rows; i++) {
        for (j = 0; j < ri_cols; j++) {
            outGradY << gradY.at<float>(i, j) << "\t";
        }
        outGradY << "\n";
    }
    dumpGradY.close();

    cv::namedWindow("gradientX", cv::WINDOW_NORMAL);	/* Create a window for display. */
    cv::imshow("gradientX", refImgGradX);	/* Show our image inside it. */
    cv::namedWindow("gradientY", cv::WINDOW_NORMAL);	/* Create a window for display. */
    cv::imshow("gradientY", refImgGradY);	/* Show our image inside it. */
    cv::waitKey(0);
}

void Dic::computeQK_B_QKT(cv::Mat img, cv::Mat bcoeff, double *dest)
{
    for (int i=0; i<bcoeff.cols-5; i++) {
        for (int j=0; j<bcoeff.rows-5; j++) {
            // Get bspline coefficients
            double b0 = bcoeff.at<float>((j)+(i));
            double b1 = bcoeff.at<float>((j+1),(i));
            double b2 = bcoeff.at<float>((j+2),(i));
            double b3 = bcoeff.at<float>((j+3),(i));
            double b4 = bcoeff.at<float>((j+4),(i));
            double b5 = bcoeff.at<float>((j+5),(i));
            double b6 = bcoeff.at<float>((j),(i+1));
            double b7 = bcoeff.at<float>((j+1),(i+1));
            double b8 = bcoeff.at<float>((j+2),(i+1));
            double b9 = bcoeff.at<float>((j+3),(i+1));
            double b10 = bcoeff.at<float>((j+4),(i+1));
            double b11 = bcoeff.at<float>((j+5),(i+1));
            double b12 = bcoeff.at<float>((j),(i+2));
            double b13 = bcoeff.at<float>((j+1),(i+2));
            double b14 = bcoeff.at<float>((j+2),(i+2));
            double b15 = bcoeff.at<float>((j+3),(i+2));
            double b16 = bcoeff.at<float>((j+4),(i+2));
            double b17 = bcoeff.at<float>((j+5),(i+2));
            double b18 = bcoeff.at<float>((j),(i+3));
            double b19 = bcoeff.at<float>((j+1),(i+3));
            double b20 = bcoeff.at<float>((j+2),(i+3));
            double b21 = bcoeff.at<float>((j+3),(i+3));
            double b22 = bcoeff.at<float>((j+4),(i+3));
            double b23 = bcoeff.at<float>((j+5),(i+3));
            double b24 = bcoeff.at<float>((j),(i+4));
            double b25 = bcoeff.at<float>((j+1),(i+4));
            double b26 = bcoeff.at<float>((j+2),(i+4));
            double b27 = bcoeff.at<float>((j+3),(i+4));
            double b28 = bcoeff.at<float>((j+4),(i+4));
            double b29 = bcoeff.at<float>((j+5),(i+4));
            double b30 = bcoeff.at<float>((j),(i+5));
            double b31 = bcoeff.at<float>((j+1),(i+5));
            double b32 = bcoeff.at<float>((j+2),(i+5));
            double b33 = bcoeff.at<float>((j+3),(i+5));
            double b34 = bcoeff.at<float>((j+4),(i+5));
            double b35 = bcoeff.at<float>((j+5),(i+5));
            int lind_qkbqkt = j*(36)+i*(36*(bcoeff.rows-5));

            //Compute QK_B_QKT vector
            dest[lind_qkbqkt] = 0.00006944444444444444*b0+0.001805555555555556*b1+0.001805555555555556*b10+0.004583333333333333*b12+0.1191666666666667*b13+0.3025*b14+0.1191666666666667*b15+0.004583333333333333*b16+0.001805555555555556*b18+0.04694444444444444*b19+0.004583333333333333*b2+0.1191666666666667*b20+0.04694444444444444*b21+0.001805555555555556*b22+0.00006944444444444444*b24+0.001805555555555556*b25+0.004583333333333333*b26+0.001805555555555556*b27+0.00006944444444444444*b28+0.001805555555555556*b3+0.00006944444444444444*b4+0.001805555555555556*b6+0.04694444444444444*b7+0.1191666666666667*b8+0.04694444444444444*b9;
            dest[lind_qkbqkt+1] = 0.009027777777777778*b10-0.003472222222222222*b1-0.0003472222222222222*b0-0.02291666666666667*b12-0.2291666666666667*b13+0.2291666666666667*b15+0.02291666666666667*b16-0.009027777777777778*b18-0.09027777777777778*b19+0.09027777777777778*b21+0.009027777777777778*b22-0.0003472222222222222*b24-0.003472222222222222*b25+0.003472222222222222*b27+0.0003472222222222222*b28+0.003472222222222222*b3+0.0003472222222222222*b4-0.009027777777777778*b6-0.09027777777777778*b7+0.09027777777777778*b9;
            dest[lind_qkbqkt+2] = 0.0006944444444444444*b0+0.001388888888888889*b1+0.01805555555555556*b10+0.04583333333333333*b12+0.09166666666666667*b13-0.275*b14+0.09166666666666667*b15+0.04583333333333333*b16+0.01805555555555556*b18+0.03611111111111111*b19-0.004166666666666667*b2-0.1083333333333333*b20+0.03611111111111111*b21+0.01805555555555556*b22+0.0006944444444444444*b24+0.001388888888888889*b25-0.004166666666666667*b26+0.001388888888888889*b27+0.0006944444444444444*b28+0.001388888888888889*b3+0.0006944444444444444*b4+0.01805555555555556*b6+0.03611111111111111*b7-0.1083333333333333*b8+0.03611111111111111*b9;
            dest[lind_qkbqkt+3] = 0.001388888888888889*b1-0.0006944444444444444*b0+0.01805555555555556*b10-0.04583333333333333*b12+0.09166666666666667*b13-0.09166666666666667*b15+0.04583333333333333*b16-0.01805555555555556*b18+0.03611111111111111*b19-0.03611111111111111*b21+0.01805555555555556*b22-0.0006944444444444444*b24+0.001388888888888889*b25-0.001388888888888889*b27+0.0006944444444444444*b28-0.001388888888888889*b3+0.0006944444444444444*b4-0.01805555555555556*b6+0.03611111111111111*b7-0.03611111111111111*b9;
            dest[lind_qkbqkt+4] = 0.0003472222222222222*b0-0.001388888888888889*b1+0.009027777777777778*b10+0.02291666666666667*b12-0.09166666666666667*b13+0.1375*b14-0.09166666666666667*b15+0.02291666666666667*b16+0.009027777777777778*b18-0.03611111111111111*b19+0.002083333333333333*b2+0.05416666666666667*b20-0.03611111111111111*b21+0.009027777777777778*b22+0.0003472222222222222*b24-0.001388888888888889*b25+0.002083333333333333*b26-0.001388888888888889*b27+0.0003472222222222222*b28-0.001388888888888889*b3+0.0003472222222222222*b4+0.009027777777777778*b6-0.03611111111111111*b7+0.05416666666666667*b8-0.03611111111111111*b9;
            dest[lind_qkbqkt+5] = 0.0003472222222222222*b1-0.00006944444444444444*b0-0.009027777777777778*b10+0.001805555555555556*b11-0.004583333333333333*b12+0.02291666666666667*b13-0.04583333333333333*b14+0.04583333333333333*b15-0.02291666666666667*b16+0.004583333333333333*b17-0.001805555555555556*b18+0.009027777777777778*b19-0.0006944444444444444*b2-0.01805555555555556*b20+0.01805555555555556*b21-0.009027777777777778*b22+0.001805555555555556*b23-0.00006944444444444444*b24+0.0003472222222222222*b25-0.0006944444444444444*b26+0.0006944444444444444*b27-0.0003472222222222222*b28+0.00006944444444444444*b29+0.0006944444444444444*b3-0.0003472222222222222*b4+0.00006944444444444444*b5-0.001805555555555556*b6+0.009027777777777778*b7-0.01805555555555556*b8+0.01805555555555556*b9;
            dest[lind_qkbqkt+6] = 0.003472222222222222*b18-0.009027777777777778*b1-0.003472222222222222*b10-0.0003472222222222222*b0+0.09027777777777778*b19-0.02291666666666667*b2+0.2291666666666667*b20+0.09027777777777778*b21+0.003472222222222222*b22+0.0003472222222222222*b24+0.009027777777777778*b25+0.02291666666666667*b26+0.009027777777777778*b27+0.0003472222222222222*b28-0.009027777777777778*b3-0.0003472222222222222*b4-0.003472222222222222*b6-0.09027777777777778*b7-0.2291666666666667*b8-0.09027777777777778*b9;
            dest[lind_qkbqkt+7] = 0.001736111111111111*b0+0.01736111111111111*b1-0.01736111111111111*b10-0.01736111111111111*b18-0.1736111111111111*b19+0.1736111111111111*b21+0.01736111111111111*b22-0.001736111111111111*b24-0.01736111111111111*b25+0.01736111111111111*b27+0.001736111111111111*b28-0.01736111111111111*b3-0.001736111111111111*b4+0.01736111111111111*b6+0.1736111111111111*b7-0.1736111111111111*b9;
            dest[lind_qkbqkt+8] = 0.03472222222222222*b18-0.006944444444444444*b1-0.03472222222222222*b10-0.003472222222222222*b0+0.06944444444444444*b19+0.02083333333333333*b2-0.2083333333333333*b20+0.06944444444444444*b21+0.03472222222222222*b22+0.003472222222222222*b24+0.006944444444444444*b25-0.02083333333333333*b26+0.006944444444444444*b27+0.003472222222222222*b28-0.006944444444444444*b3-0.003472222222222222*b4-0.03472222222222222*b6-0.06944444444444444*b7+0.2083333333333333*b8-0.06944444444444444*b9;
            dest[lind_qkbqkt+9] = 0.003472222222222222*b0-0.006944444444444444*b1-0.03472222222222222*b10-0.03472222222222222*b18+0.06944444444444444*b19-0.06944444444444444*b21+0.03472222222222222*b22-0.003472222222222222*b24+0.006944444444444444*b25-0.006944444444444444*b27+0.003472222222222222*b28+0.006944444444444444*b3-0.003472222222222222*b4+0.03472222222222222*b6-0.06944444444444444*b7+0.06944444444444444*b9;
            dest[lind_qkbqkt+10] = 0.006944444444444444*b1-0.001736111111111111*b0-0.01736111111111111*b10+0.01736111111111111*b18-0.06944444444444444*b19-0.01041666666666667*b2+0.1041666666666667*b20-0.06944444444444444*b21+0.01736111111111111*b22+0.001736111111111111*b24-0.006944444444444444*b25+0.01041666666666667*b26-0.006944444444444444*b27+0.001736111111111111*b28+0.006944444444444444*b3-0.001736111111111111*b4-0.01736111111111111*b6+0.06944444444444444*b7-0.1041666666666667*b8+0.06944444444444444*b9;
            dest[lind_qkbqkt+11] = 0.0003472222222222222*b0-0.001736111111111111*b1+0.01736111111111111*b10-0.003472222222222222*b11-0.003472222222222222*b18+0.01736111111111111*b19+0.003472222222222222*b2-0.03472222222222222*b20+0.03472222222222222*b21-0.01736111111111111*b22+0.003472222222222222*b23-0.0003472222222222222*b24+0.001736111111111111*b25-0.003472222222222222*b26+0.003472222222222222*b27-0.001736111111111111*b28+0.0003472222222222222*b29-0.003472222222222222*b3+0.001736111111111111*b4-0.0003472222222222222*b5+0.003472222222222222*b6-0.01736111111111111*b7+0.03472222222222222*b8-0.03472222222222222*b9;
            dest[lind_qkbqkt+12] = 0.0006944444444444444*b0+0.01805555555555556*b1+0.001388888888888889*b10-0.004166666666666667*b12-0.1083333333333333*b13-0.275*b14-0.1083333333333333*b15-0.004166666666666667*b16+0.001388888888888889*b18+0.03611111111111111*b19+0.04583333333333333*b2+0.09166666666666667*b20+0.03611111111111111*b21+0.001388888888888889*b22+0.0006944444444444444*b24+0.01805555555555556*b25+0.04583333333333333*b26+0.01805555555555556*b27+0.0006944444444444444*b28+0.01805555555555556*b3+0.0006944444444444444*b4+0.001388888888888889*b6+0.03611111111111111*b7+0.09166666666666667*b8+0.03611111111111111*b9;
            dest[lind_qkbqkt+13] = 0.006944444444444444*b10-0.03472222222222222*b1-0.003472222222222222*b0+0.02083333333333333*b12+0.2083333333333333*b13-0.2083333333333333*b15-0.02083333333333333*b16-0.006944444444444444*b18-0.06944444444444444*b19+0.06944444444444444*b21+0.006944444444444444*b22-0.003472222222222222*b24-0.03472222222222222*b25+0.03472222222222222*b27+0.003472222222222222*b28+0.03472222222222222*b3+0.003472222222222222*b4-0.006944444444444444*b6-0.06944444444444444*b7+0.06944444444444444*b9;
            dest[lind_qkbqkt+14] = 0.006944444444444444*b0+0.01388888888888889*b1+0.01388888888888889*b10-0.04166666666666667*b12-0.08333333333333333*b13+0.25*b14-0.08333333333333333*b15-0.04166666666666667*b16+0.01388888888888889*b18+0.02777777777777778*b19-0.04166666666666667*b2-0.08333333333333333*b20+0.02777777777777778*b21+0.01388888888888889*b22+0.006944444444444444*b24+0.01388888888888889*b25-0.04166666666666667*b26+0.01388888888888889*b27+0.006944444444444444*b28+0.01388888888888889*b3+0.006944444444444444*b4+0.01388888888888889*b6+0.02777777777777778*b7-0.08333333333333333*b8+0.02777777777777778*b9;
            dest[lind_qkbqkt+15] = 0.01388888888888889*b1-0.006944444444444444*b0+0.01388888888888889*b10+0.04166666666666667*b12-0.08333333333333333*b13+0.08333333333333333*b15-0.04166666666666667*b16-0.01388888888888889*b18+0.02777777777777778*b19-0.02777777777777778*b21+0.01388888888888889*b22-0.006944444444444444*b24+0.01388888888888889*b25-0.01388888888888889*b27+0.006944444444444444*b28-0.01388888888888889*b3+0.006944444444444444*b4-0.01388888888888889*b6+0.02777777777777778*b7-0.02777777777777778*b9;
            dest[lind_qkbqkt+16] = 0.003472222222222222*b0-0.01388888888888889*b1+0.006944444444444444*b10-0.02083333333333333*b12+0.08333333333333333*b13-0.125*b14+0.08333333333333333*b15-0.02083333333333333*b16+0.006944444444444444*b18-0.02777777777777778*b19+0.02083333333333333*b2+0.04166666666666667*b20-0.02777777777777778*b21+0.006944444444444444*b22+0.003472222222222222*b24-0.01388888888888889*b25+0.02083333333333333*b26-0.01388888888888889*b27+0.003472222222222222*b28-0.01388888888888889*b3+0.003472222222222222*b4+0.006944444444444444*b6-0.02777777777777778*b7+0.04166666666666667*b8-0.02777777777777778*b9;
            dest[lind_qkbqkt+17] = 0.003472222222222222*b1-0.0006944444444444444*b0-0.006944444444444444*b10+0.001388888888888889*b11+0.004166666666666667*b12-0.02083333333333333*b13+0.04166666666666667*b14-0.04166666666666667*b15+0.02083333333333333*b16-0.004166666666666667*b17-0.001388888888888889*b18+0.006944444444444444*b19-0.006944444444444444*b2-0.01388888888888889*b20+0.01388888888888889*b21-0.006944444444444444*b22+0.001388888888888889*b23-0.0006944444444444444*b24+0.003472222222222222*b25-0.006944444444444444*b26+0.006944444444444444*b27-0.003472222222222222*b28+0.0006944444444444444*b29+0.006944444444444444*b3-0.003472222222222222*b4+0.0006944444444444444*b5-0.001388888888888889*b6+0.006944444444444444*b7-0.01388888888888889*b8+0.01388888888888889*b9;
            dest[lind_qkbqkt+18] = 0.001388888888888889*b10-0.01805555555555556*b1-0.0006944444444444444*b0-0.001388888888888889*b18-0.03611111111111111*b19-0.04583333333333333*b2-0.09166666666666667*b20-0.03611111111111111*b21-0.001388888888888889*b22+0.0006944444444444444*b24+0.01805555555555556*b25+0.04583333333333333*b26+0.01805555555555556*b27+0.0006944444444444444*b28-0.01805555555555556*b3-0.0006944444444444444*b4+0.001388888888888889*b6+0.03611111111111111*b7+0.09166666666666667*b8+0.03611111111111111*b9;
            dest[lind_qkbqkt+19] = 0.003472222222222222*b0+0.03472222222222222*b1+0.006944444444444444*b10+0.006944444444444444*b18+0.06944444444444444*b19-0.06944444444444444*b21-0.006944444444444444*b22-0.003472222222222222*b24-0.03472222222222222*b25+0.03472222222222222*b27+0.003472222222222222*b28-0.03472222222222222*b3-0.003472222222222222*b4-0.006944444444444444*b6-0.06944444444444444*b7+0.06944444444444444*b9;
            dest[lind_qkbqkt+20] = 0.01388888888888889*b10-0.01388888888888889*b1-0.006944444444444444*b0-0.01388888888888889*b18-0.02777777777777778*b19+0.04166666666666667*b2+0.08333333333333333*b20-0.02777777777777778*b21-0.01388888888888889*b22+0.006944444444444444*b24+0.01388888888888889*b25-0.04166666666666667*b26+0.01388888888888889*b27+0.006944444444444444*b28-0.01388888888888889*b3-0.006944444444444444*b4+0.01388888888888889*b6+0.02777777777777778*b7-0.08333333333333333*b8+0.02777777777777778*b9;
            dest[lind_qkbqkt+21] = 0.006944444444444444*b0-0.01388888888888889*b1+0.01388888888888889*b10+0.01388888888888889*b18-0.02777777777777778*b19+0.02777777777777778*b21-0.01388888888888889*b22-0.006944444444444444*b24+0.01388888888888889*b25-0.01388888888888889*b27+0.006944444444444444*b28+0.01388888888888889*b3-0.006944444444444444*b4-0.01388888888888889*b6+0.02777777777777778*b7-0.02777777777777778*b9;
            dest[lind_qkbqkt+22] = 0.01388888888888889*b1-0.003472222222222222*b0+0.006944444444444444*b10-0.006944444444444444*b18+0.02777777777777778*b19-0.02083333333333333*b2-0.04166666666666667*b20+0.02777777777777778*b21-0.006944444444444444*b22+0.003472222222222222*b24-0.01388888888888889*b25+0.02083333333333333*b26-0.01388888888888889*b27+0.003472222222222222*b28+0.01388888888888889*b3-0.003472222222222222*b4+0.006944444444444444*b6-0.02777777777777778*b7+0.04166666666666667*b8-0.02777777777777778*b9;
            dest[lind_qkbqkt+23] = 0.0006944444444444444*b0-0.003472222222222222*b1-0.006944444444444444*b10+0.001388888888888889*b11+0.001388888888888889*b18-0.006944444444444444*b19+0.006944444444444444*b2+0.01388888888888889*b20-0.01388888888888889*b21+0.006944444444444444*b22-0.001388888888888889*b23-0.0006944444444444444*b24+0.003472222222222222*b25-0.006944444444444444*b26+0.006944444444444444*b27-0.003472222222222222*b28+0.0006944444444444444*b29-0.006944444444444444*b3+0.003472222222222222*b4-0.0006944444444444444*b5-0.001388888888888889*b6+0.006944444444444444*b7-0.01388888888888889*b8+0.01388888888888889*b9;
            dest[lind_qkbqkt+24] = 0.0003472222222222222*b0+0.009027777777777778*b1-0.001388888888888889*b10+0.002083333333333333*b12+0.05416666666666667*b13+0.1375*b14+0.05416666666666667*b15+0.002083333333333333*b16-0.001388888888888889*b18-0.03611111111111111*b19+0.02291666666666667*b2-0.09166666666666667*b20-0.03611111111111111*b21-0.001388888888888889*b22+0.0003472222222222222*b24+0.009027777777777778*b25+0.02291666666666667*b26+0.009027777777777778*b27+0.0003472222222222222*b28+0.009027777777777778*b3+0.0003472222222222222*b4-0.001388888888888889*b6-0.03611111111111111*b7-0.09166666666666667*b8-0.03611111111111111*b9;
            dest[lind_qkbqkt+25] = 0.1041666666666667*b15-0.01736111111111111*b1-0.006944444444444444*b10-0.01041666666666667*b12-0.1041666666666667*b13-0.001736111111111111*b0+0.01041666666666667*b16+0.006944444444444444*b18+0.06944444444444444*b19-0.06944444444444444*b21-0.006944444444444444*b22-0.001736111111111111*b24-0.01736111111111111*b25+0.01736111111111111*b27+0.001736111111111111*b28+0.01736111111111111*b3+0.001736111111111111*b4+0.006944444444444444*b6+0.06944444444444444*b7-0.06944444444444444*b9;
            dest[lind_qkbqkt+26] = 0.003472222222222222*b0+0.006944444444444444*b1-0.01388888888888889*b10+0.02083333333333333*b12+0.04166666666666667*b13-0.125*b14+0.04166666666666667*b15+0.02083333333333333*b16-0.01388888888888889*b18-0.02777777777777778*b19-0.02083333333333333*b2+0.08333333333333333*b20-0.02777777777777778*b21-0.01388888888888889*b22+0.003472222222222222*b24+0.006944444444444444*b25-0.02083333333333333*b26+0.006944444444444444*b27+0.003472222222222222*b28+0.006944444444444444*b3+0.003472222222222222*b4-0.01388888888888889*b6-0.02777777777777778*b7+0.08333333333333333*b8-0.02777777777777778*b9;
            dest[lind_qkbqkt+27] = 0.006944444444444444*b1-0.003472222222222222*b0-0.01388888888888889*b10-0.02083333333333333*b12+0.04166666666666667*b13-0.04166666666666667*b15+0.02083333333333333*b16+0.01388888888888889*b18-0.02777777777777778*b19+0.02777777777777778*b21-0.01388888888888889*b22-0.003472222222222222*b24+0.006944444444444444*b25-0.006944444444444444*b27+0.003472222222222222*b28-0.006944444444444444*b3+0.003472222222222222*b4+0.01388888888888889*b6-0.02777777777777778*b7+0.02777777777777778*b9;
            dest[lind_qkbqkt+28] = 0.001736111111111111*b0-0.006944444444444444*b1-0.006944444444444444*b10+0.01041666666666667*b12-0.04166666666666667*b13+0.0625*b14-0.04166666666666667*b15+0.01041666666666667*b16-0.006944444444444444*b18+0.02777777777777778*b19+0.01041666666666667*b2-0.04166666666666667*b20+0.02777777777777778*b21-0.006944444444444444*b22+0.001736111111111111*b24-0.006944444444444444*b25+0.01041666666666667*b26-0.006944444444444444*b27+0.001736111111111111*b28-0.006944444444444444*b3+0.001736111111111111*b4-0.006944444444444444*b6+0.02777777777777778*b7-0.04166666666666667*b8+0.02777777777777778*b9;
            dest[lind_qkbqkt+29] = 0.001736111111111111*b1-0.0003472222222222222*b0+0.006944444444444444*b10-0.001388888888888889*b11-0.002083333333333333*b12+0.01041666666666667*b13-0.02083333333333333*b14+0.02083333333333333*b15-0.01041666666666667*b16+0.002083333333333333*b17+0.001388888888888889*b18-0.006944444444444444*b19-0.003472222222222222*b2+0.01388888888888889*b20-0.01388888888888889*b21+0.006944444444444444*b22-0.001388888888888889*b23-0.0003472222222222222*b24+0.001736111111111111*b25-0.003472222222222222*b26+0.003472222222222222*b27-0.001736111111111111*b28+0.0003472222222222222*b29+0.003472222222222222*b3-0.001736111111111111*b4+0.0003472222222222222*b5+0.001388888888888889*b6-0.006944444444444444*b7+0.01388888888888889*b8-0.01388888888888889*b9;
            dest[lind_qkbqkt+30] = 0.0003472222222222222*b10-0.001805555555555556*b1-0.00006944444444444444*b0-0.0006944444444444444*b12-0.01805555555555556*b13-0.04583333333333333*b14-0.01805555555555556*b15-0.0006944444444444444*b16+0.0006944444444444444*b18+0.01805555555555556*b19-0.004583333333333333*b2+0.04583333333333333*b20+0.01805555555555556*b21+0.0006944444444444444*b22-0.0003472222222222222*b24-0.009027777777777778*b25-0.02291666666666667*b26-0.009027777777777778*b27-0.0003472222222222222*b28-0.001805555555555556*b3+0.00006944444444444444*b30+0.001805555555555556*b31+0.004583333333333333*b32+0.001805555555555556*b33+0.00006944444444444444*b34-0.00006944444444444444*b4+0.0003472222222222222*b6+0.009027777777777778*b7+0.02291666666666667*b8+0.009027777777777778*b9;
            dest[lind_qkbqkt+31] = 0.0003472222222222222*b0+0.003472222222222222*b1+0.001736111111111111*b10+0.003472222222222222*b12+0.03472222222222222*b13-0.03472222222222222*b15-0.003472222222222222*b16-0.003472222222222222*b18-0.03472222222222222*b19+0.03472222222222222*b21+0.003472222222222222*b22+0.001736111111111111*b24+0.01736111111111111*b25-0.01736111111111111*b27-0.001736111111111111*b28-0.003472222222222222*b3-0.0003472222222222222*b30-0.003472222222222222*b31+0.003472222222222222*b33+0.0003472222222222222*b34-0.0003472222222222222*b4-0.001736111111111111*b6-0.01736111111111111*b7+0.01736111111111111*b9;
            dest[lind_qkbqkt+32] = 0.003472222222222222*b10-0.001388888888888889*b1-0.0006944444444444444*b0-0.006944444444444444*b12-0.01388888888888889*b13+0.04166666666666667*b14-0.01388888888888889*b15-0.006944444444444444*b16+0.006944444444444444*b18+0.01388888888888889*b19+0.004166666666666667*b2-0.04166666666666667*b20+0.01388888888888889*b21+0.006944444444444444*b22-0.003472222222222222*b24-0.006944444444444444*b25+0.02083333333333333*b26-0.006944444444444444*b27-0.003472222222222222*b28-0.001388888888888889*b3+0.0006944444444444444*b30+0.001388888888888889*b31-0.004166666666666667*b32+0.001388888888888889*b33+0.0006944444444444444*b34-0.0006944444444444444*b4+0.003472222222222222*b6+0.006944444444444444*b7-0.02083333333333333*b8+0.006944444444444444*b9;
            dest[lind_qkbqkt+33] = 0.0006944444444444444*b0-0.001388888888888889*b1+0.003472222222222222*b10+0.006944444444444444*b12-0.01388888888888889*b13+0.01388888888888889*b15-0.006944444444444444*b16-0.006944444444444444*b18+0.01388888888888889*b19-0.01388888888888889*b21+0.006944444444444444*b22+0.003472222222222222*b24-0.006944444444444444*b25+0.006944444444444444*b27-0.003472222222222222*b28+0.001388888888888889*b3-0.0006944444444444444*b30+0.001388888888888889*b31-0.001388888888888889*b33+0.0006944444444444444*b34-0.0006944444444444444*b4-0.003472222222222222*b6+0.006944444444444444*b7-0.006944444444444444*b9;
            dest[lind_qkbqkt+34] = 0.001388888888888889*b1-0.0003472222222222222*b0+0.001736111111111111*b10-0.003472222222222222*b12+0.01388888888888889*b13-0.02083333333333333*b14+0.01388888888888889*b15-0.003472222222222222*b16+0.003472222222222222*b18-0.01388888888888889*b19-0.002083333333333333*b2+0.02083333333333333*b20-0.01388888888888889*b21+0.003472222222222222*b22-0.001736111111111111*b24+0.006944444444444444*b25-0.01041666666666667*b26+0.006944444444444444*b27-0.001736111111111111*b28+0.001388888888888889*b3+0.0003472222222222222*b30-0.001388888888888889*b31+0.002083333333333333*b32-0.001388888888888889*b33+0.0003472222222222222*b34-0.0003472222222222222*b4+0.001736111111111111*b6-0.006944444444444444*b7+0.01041666666666667*b8-0.006944444444444444*b9;
            dest[lind_qkbqkt+35] = 0.00006944444444444444*b0-0.0003472222222222222*b1-0.001736111111111111*b10+0.0003472222222222222*b11+0.0006944444444444444*b12-0.003472222222222222*b13+0.006944444444444444*b14-0.006944444444444444*b15+0.003472222222222222*b16-0.0006944444444444444*b17-0.0006944444444444444*b18+0.003472222222222222*b19+0.0006944444444444444*b2-0.006944444444444444*b20+0.006944444444444444*b21-0.003472222222222222*b22+0.0006944444444444444*b23+0.0003472222222222222*b24-0.001736111111111111*b25+0.003472222222222222*b26-0.003472222222222222*b27+0.001736111111111111*b28-0.0003472222222222222*b29-0.0006944444444444444*b3-0.00006944444444444444*b30+0.0003472222222222222*b31-0.0006944444444444444*b32+0.0006944444444444444*b33-0.0003472222222222222*b34+0.00006944444444444444*b35+0.0003472222222222222*b4-0.00006944444444444444*b5-0.0003472222222222222*b6+0.001736111111111111*b7-0.003472222222222222*b8+0.003472222222222222*b9;
        }
    }
}

cv::Mat Dic::getReferenceImage()
{
    return referenceImage;
}

cv::Mat Dic::getImgGradX()
{
    return refImgGradX;
}

cv::Mat Dic::getImgGradY()
{
    return refImgGradY;
}

int Dic::getCurrentImagesCount()
{
    return currentImagesCount;
}

cv::Mat Dic::getCurrentImage(int i)
{
    return currentImages[i];
}

Dic::~Dic()
{
    referenceImage.release();
    if (currentImages != NULL) {
        for (int i = 0; i < currentImagesCount; i++) {
            currentImages[i].release();
        }
        currentImages = NULL;
    }
}

#include "dic.h"
#include "dicimage.h"
#include "utils.h"
#include <QDebug>
#include <QFile>
//#include <fstream>

Dic::Dic() { this->currentImagesCount = 0; }

void Dic::setReferenceImage(const DicImage refImage) {
  this->referenceImage = refImage;
}

void Dic::setROI(cv::Mat matrix) { roi = matrix; }

void Dic::performDicAnalysis() {
  cv::Mat bcoef = referenceImage.getBcoef();
  int height = referenceImage.getHeight();
  int width = referenceImage.getWidth();

  refImgGradX.resize(height * width, 0.0);
  refImgGradY.resize(height * width, 0.0);

  int border = referenceImage.getBcoefBorder();
  // Pre compute reference image gradient -----------------------------//
  for (int row = border - 2; row < border + height - 2; row++) {
    for (int col = border - 2; col < border + width - 2; col++) {
      // Get bspline coefficients
      double b0 = bcoef.at<double>(row, col);
      double b1 = bcoef.at<double>(row + 1, col);
      double b2 = bcoef.at<double>(row + 2, col);
      double b3 = bcoef.at<double>(row + 3, col);
      double b4 = bcoef.at<double>(row + 4, col);
      double b5 = bcoef.at<double>(row + 5, col);
      double b6 = bcoef.at<double>(row, col + 1);
      double b7 = bcoef.at<double>(row + 1, col + 1);
      double b8 = bcoef.at<double>(row + 2, col + 1);
      double b9 = bcoef.at<double>(row + 3, col + 1);
      double b11 = bcoef.at<double>(row + 4, col + 1);
      double b10 = bcoef.at<double>(row + 5, col + 1);
      double b12 = bcoef.at<double>(row, col + 2);
      double b13 = bcoef.at<double>(row + 1, col + 2);
      double b14 = bcoef.at<double>(row + 2, col + 2);
      double b15 = bcoef.at<double>(row + 3, col + 2);
      double b16 = bcoef.at<double>(row + 4, col + 2);
      double b17 = bcoef.at<double>(row + 5, col + 2);
      double b18 = bcoef.at<double>(row, col + 3);
      double b19 = bcoef.at<double>(row + 1, col + 3);
      double b20 = bcoef.at<double>(row + 2, col + 3);
      double b21 = bcoef.at<double>(row + 3, col + 3);
      double b22 = bcoef.at<double>(row + 4, col + 3);
      double b23 = bcoef.at<double>(row + 5, col + 3);
      double b24 = bcoef.at<double>(row, col + 4);
      double b25 = bcoef.at<double>(row + 1, col + 4);
      double b26 = bcoef.at<double>(row + 2, col + 4);
      double b27 = bcoef.at<double>(row + 3, col + 4);
      double b28 = bcoef.at<double>(row + 4, col + 4);
      double b29 = bcoef.at<double>(row + 5, col + 4);
      double b30 = bcoef.at<double>(row, col + 5);
      double b31 = bcoef.at<double>(row + 1, col + 5);
      double b32 = bcoef.at<double>(row + 2, col + 5);
      double b33 = bcoef.at<double>(row + 3, col + 5);
      double b34 = bcoef.at<double>(row + 4, col + 5);
      double b35 = bcoef.at<double>(row + 5, col + 5);

      std::size_t lind_f = row - (border - 2) +
                           (col - (border - 2)) * height;

      refImgGradX[lind_f] =
          0.003472222222222222 * b18 - 0.009027777777777778 * b1 -
          0.003472222222222222 * b10 - 0.0003472222222222222 * b0 +
          0.09027777777777778 * b19 - 0.02291666666666667 * b2 +
          0.2291666666666667 * b20 + 0.09027777777777778 * b21 +
          0.003472222222222222 * b22 + 0.0003472222222222222 * b24 +
          0.009027777777777778 * b25 + 0.02291666666666667 * b26 +
          0.009027777777777778 * b27 + 0.0003472222222222222 * b28 -
          0.009027777777777778 * b3 - 0.0003472222222222222 * b4 -
          0.003472222222222222 * b6 - 0.09027777777777778 * b7 -
          0.2291666666666667 * b8 - 0.09027777777777778 * b9;
      refImgGradY[lind_f] =
          0.009027777777777778 * b10 - 0.003472222222222222 * b1 -
          0.0003472222222222222 * b0 - 0.02291666666666667 * b12 -
          0.2291666666666667 * b13 + 0.2291666666666667 * b15 +
          0.02291666666666667 * b16 - 0.009027777777777778 * b18 -
          0.09027777777777778 * b19 + 0.09027777777777778 * b21 +
          0.009027777777777778 * b22 - 0.0003472222222222222 * b24 -
          0.003472222222222222 * b25 + 0.003472222222222222 * b27 +
          0.0003472222222222222 * b28 + 0.003472222222222222 * b3 +
          0.0003472222222222222 * b4 - 0.009027777777777778 * b6 -
          0.09027777777777778 * b7 + 0.09027777777777778 * b9;
    }
  }
  //std::ofstream outFile2("./outputdfdx.txt");
  //for (const auto &e : refImgGradX) outFile2 << e << "\n";
  //std::ofstream outFile3("./outputdfdy.txt");
  //for (const auto &e : refImgGradY) outFile3 << e << "\n";

  // dic for each current image
  for (std::size_t i = 0; i < currentImagesCount; i++) {
    preCompute(i);
    //matchSeed(i);
  }
}

void Dic::preCompute(std::size_t currImage) {
  cv::Mat bcoef = currentImages[currImage].getBcoef();
  QK_B_QKT.resize(36 * (bcoef.rows - 5) * (bcoef.cols - 5), 0.0);
  // Pre compute interpolation coefficients ---------------------------//
  for (int j = 0; j < bcoef.rows - 5; j++) {
    for (int i = 0; i < bcoef.cols - 5; i++) {
      // Get bspline coefficients
      double b0 = bcoef.at<double>(j, i);
      double b1 = bcoef.at<double>(j + 1, i);
      double b2 = bcoef.at<double>(j + 2, i);
      double b3 = bcoef.at<double>(j + 3, i);
      double b4 = bcoef.at<double>(j + 4, i);
      double b5 = bcoef.at<double>(j + 5, i);
      double b6 = bcoef.at<double>(j, i + 1);
      double b7 = bcoef.at<double>(j + 1, i + 1);
      double b8 = bcoef.at<double>(j + 2, i + 1);
      double b9 = bcoef.at<double>(j + 3, i + 1);
      double b10 = bcoef.at<double>(j + 4, i + 1);
      double b11 = bcoef.at<double>(j + 5, i + 1);
      double b12 = bcoef.at<double>(j, i + 2);
      double b13 = bcoef.at<double>(j + 1, i + 2);
      double b14 = bcoef.at<double>(j + 2, i + 2);
      double b15 = bcoef.at<double>(j + 3, i + 2);
      double b16 = bcoef.at<double>(j + 4, i + 2);
      double b17 = bcoef.at<double>(j + 5, i + 2);
      double b18 = bcoef.at<double>(j, i + 3);
      double b19 = bcoef.at<double>(j + 1, i + 3);
      double b20 = bcoef.at<double>(j + 2, i + 3);
      double b21 = bcoef.at<double>(j + 3, i + 3);
      double b22 = bcoef.at<double>(j + 4, i + 3);
      double b23 = bcoef.at<double>(j + 5, i + 3);
      double b24 = bcoef.at<double>(j, i + 4);
      double b25 = bcoef.at<double>(j + 1, i + 4);
      double b26 = bcoef.at<double>(j + 2, i + 4);
      double b27 = bcoef.at<double>(j + 3, i + 4);
      double b28 = bcoef.at<double>(j + 4, i + 4);
      double b29 = bcoef.at<double>(j + 5, i + 4);
      double b30 = bcoef.at<double>(j, i + 5);
      double b31 = bcoef.at<double>(j + 1, i + 5);
      double b32 = bcoef.at<double>(j + 2, i + 5);
      double b33 = bcoef.at<double>(j + 3, i + 5);
      double b34 = bcoef.at<double>(j + 4, i + 5);
      double b35 = bcoef.at<double>(j + 5, i + 5);

      // Compute QK_B_QKT vector
      std::size_t lind_qkbqkt = j * 36 + i * (36 * (bcoef.rows - 5));

      QK_B_QKT[lind_qkbqkt] =
          0.00006944444444444444 * b0 + 0.001805555555555556 * b1 +
          0.001805555555555556 * b10 + 0.004583333333333333 * b12 +
          0.1191666666666667 * b13 + 0.3025 * b14 + 0.1191666666666667 * b15 +
          0.004583333333333333 * b16 + 0.001805555555555556 * b18 +
          0.04694444444444444 * b19 + 0.004583333333333333 * b2 +
          0.1191666666666667 * b20 + 0.04694444444444444 * b21 +
          0.001805555555555556 * b22 + 0.00006944444444444444 * b24 +
          0.001805555555555556 * b25 + 0.004583333333333333 * b26 +
          0.001805555555555556 * b27 + 0.00006944444444444444 * b28 +
          0.001805555555555556 * b3 + 0.00006944444444444444 * b4 +
          0.001805555555555556 * b6 + 0.04694444444444444 * b7 +
          0.1191666666666667 * b8 + 0.04694444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 1] =
          0.009027777777777778 * b10 - 0.003472222222222222 * b1 -
          0.0003472222222222222 * b0 - 0.02291666666666667 * b12 -
          0.2291666666666667 * b13 + 0.2291666666666667 * b15 +
          0.02291666666666667 * b16 - 0.009027777777777778 * b18 -
          0.09027777777777778 * b19 + 0.09027777777777778 * b21 +
          0.009027777777777778 * b22 - 0.0003472222222222222 * b24 -
          0.003472222222222222 * b25 + 0.003472222222222222 * b27 +
          0.0003472222222222222 * b28 + 0.003472222222222222 * b3 +
          0.0003472222222222222 * b4 - 0.009027777777777778 * b6 -
          0.09027777777777778 * b7 + 0.09027777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 2] =
          0.0006944444444444444 * b0 + 0.001388888888888889 * b1 +
          0.01805555555555556 * b10 + 0.04583333333333333 * b12 +
          0.09166666666666667 * b13 - 0.275 * b14 + 0.09166666666666667 * b15 +
          0.04583333333333333 * b16 + 0.01805555555555556 * b18 +
          0.03611111111111111 * b19 - 0.004166666666666667 * b2 -
          0.1083333333333333 * b20 + 0.03611111111111111 * b21 +
          0.01805555555555556 * b22 + 0.0006944444444444444 * b24 +
          0.001388888888888889 * b25 - 0.004166666666666667 * b26 +
          0.001388888888888889 * b27 + 0.0006944444444444444 * b28 +
          0.001388888888888889 * b3 + 0.0006944444444444444 * b4 +
          0.01805555555555556 * b6 + 0.03611111111111111 * b7 -
          0.1083333333333333 * b8 + 0.03611111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 3] =
          0.001388888888888889 * b1 - 0.0006944444444444444 * b0 +
          0.01805555555555556 * b10 - 0.04583333333333333 * b12 +
          0.09166666666666667 * b13 - 0.09166666666666667 * b15 +
          0.04583333333333333 * b16 - 0.01805555555555556 * b18 +
          0.03611111111111111 * b19 - 0.03611111111111111 * b21 +
          0.01805555555555556 * b22 - 0.0006944444444444444 * b24 +
          0.001388888888888889 * b25 - 0.001388888888888889 * b27 +
          0.0006944444444444444 * b28 - 0.001388888888888889 * b3 +
          0.0006944444444444444 * b4 - 0.01805555555555556 * b6 +
          0.03611111111111111 * b7 - 0.03611111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 4] =
          0.0003472222222222222 * b0 - 0.001388888888888889 * b1 +
          0.009027777777777778 * b10 + 0.02291666666666667 * b12 -
          0.09166666666666667 * b13 + 0.1375 * b14 - 0.09166666666666667 * b15 +
          0.02291666666666667 * b16 + 0.009027777777777778 * b18 -
          0.03611111111111111 * b19 + 0.002083333333333333 * b2 +
          0.05416666666666667 * b20 - 0.03611111111111111 * b21 +
          0.009027777777777778 * b22 + 0.0003472222222222222 * b24 -
          0.001388888888888889 * b25 + 0.002083333333333333 * b26 -
          0.001388888888888889 * b27 + 0.0003472222222222222 * b28 -
          0.001388888888888889 * b3 + 0.0003472222222222222 * b4 +
          0.009027777777777778 * b6 - 0.03611111111111111 * b7 +
          0.05416666666666667 * b8 - 0.03611111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 5] =
          0.0003472222222222222 * b1 - 0.00006944444444444444 * b0 -
          0.009027777777777778 * b10 + 0.001805555555555556 * b11 -
          0.004583333333333333 * b12 + 0.02291666666666667 * b13 -
          0.04583333333333333 * b14 + 0.04583333333333333 * b15 -
          0.02291666666666667 * b16 + 0.004583333333333333 * b17 -
          0.001805555555555556 * b18 + 0.009027777777777778 * b19 -
          0.0006944444444444444 * b2 - 0.01805555555555556 * b20 +
          0.01805555555555556 * b21 - 0.009027777777777778 * b22 +
          0.001805555555555556 * b23 - 0.00006944444444444444 * b24 +
          0.0003472222222222222 * b25 - 0.0006944444444444444 * b26 +
          0.0006944444444444444 * b27 - 0.0003472222222222222 * b28 +
          0.00006944444444444444 * b29 + 0.0006944444444444444 * b3 -
          0.0003472222222222222 * b4 + 0.00006944444444444444 * b5 -
          0.001805555555555556 * b6 + 0.009027777777777778 * b7 -
          0.01805555555555556 * b8 + 0.01805555555555556 * b9;
      QK_B_QKT[lind_qkbqkt + 6] =
          0.003472222222222222 * b18 - 0.009027777777777778 * b1 -
          0.003472222222222222 * b10 - 0.0003472222222222222 * b0 +
          0.09027777777777778 * b19 - 0.02291666666666667 * b2 +
          0.2291666666666667 * b20 + 0.09027777777777778 * b21 +
          0.003472222222222222 * b22 + 0.0003472222222222222 * b24 +
          0.009027777777777778 * b25 + 0.02291666666666667 * b26 +
          0.009027777777777778 * b27 + 0.0003472222222222222 * b28 -
          0.009027777777777778 * b3 - 0.0003472222222222222 * b4 -
          0.003472222222222222 * b6 - 0.09027777777777778 * b7 -
          0.2291666666666667 * b8 - 0.09027777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 7] =
          0.001736111111111111 * b0 + 0.01736111111111111 * b1 -
          0.01736111111111111 * b10 - 0.01736111111111111 * b18 -
          0.1736111111111111 * b19 + 0.1736111111111111 * b21 +
          0.01736111111111111 * b22 - 0.001736111111111111 * b24 -
          0.01736111111111111 * b25 + 0.01736111111111111 * b27 +
          0.001736111111111111 * b28 - 0.01736111111111111 * b3 -
          0.001736111111111111 * b4 + 0.01736111111111111 * b6 +
          0.1736111111111111 * b7 - 0.1736111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 8] =
          0.03472222222222222 * b18 - 0.006944444444444444 * b1 -
          0.03472222222222222 * b10 - 0.003472222222222222 * b0 +
          0.06944444444444444 * b19 + 0.02083333333333333 * b2 -
          0.2083333333333333 * b20 + 0.06944444444444444 * b21 +
          0.03472222222222222 * b22 + 0.003472222222222222 * b24 +
          0.006944444444444444 * b25 - 0.02083333333333333 * b26 +
          0.006944444444444444 * b27 + 0.003472222222222222 * b28 -
          0.006944444444444444 * b3 - 0.003472222222222222 * b4 -
          0.03472222222222222 * b6 - 0.06944444444444444 * b7 +
          0.2083333333333333 * b8 - 0.06944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 9] =
          0.003472222222222222 * b0 - 0.006944444444444444 * b1 -
          0.03472222222222222 * b10 - 0.03472222222222222 * b18 +
          0.06944444444444444 * b19 - 0.06944444444444444 * b21 +
          0.03472222222222222 * b22 - 0.003472222222222222 * b24 +
          0.006944444444444444 * b25 - 0.006944444444444444 * b27 +
          0.003472222222222222 * b28 + 0.006944444444444444 * b3 -
          0.003472222222222222 * b4 + 0.03472222222222222 * b6 -
          0.06944444444444444 * b7 + 0.06944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 10] =
          0.006944444444444444 * b1 - 0.001736111111111111 * b0 -
          0.01736111111111111 * b10 + 0.01736111111111111 * b18 -
          0.06944444444444444 * b19 - 0.01041666666666667 * b2 +
          0.1041666666666667 * b20 - 0.06944444444444444 * b21 +
          0.01736111111111111 * b22 + 0.001736111111111111 * b24 -
          0.006944444444444444 * b25 + 0.01041666666666667 * b26 -
          0.006944444444444444 * b27 + 0.001736111111111111 * b28 +
          0.006944444444444444 * b3 - 0.001736111111111111 * b4 -
          0.01736111111111111 * b6 + 0.06944444444444444 * b7 -
          0.1041666666666667 * b8 + 0.06944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 11] =
          0.0003472222222222222 * b0 - 0.001736111111111111 * b1 +
          0.01736111111111111 * b10 - 0.003472222222222222 * b11 -
          0.003472222222222222 * b18 + 0.01736111111111111 * b19 +
          0.003472222222222222 * b2 - 0.03472222222222222 * b20 +
          0.03472222222222222 * b21 - 0.01736111111111111 * b22 +
          0.003472222222222222 * b23 - 0.0003472222222222222 * b24 +
          0.001736111111111111 * b25 - 0.003472222222222222 * b26 +
          0.003472222222222222 * b27 - 0.001736111111111111 * b28 +
          0.0003472222222222222 * b29 - 0.003472222222222222 * b3 +
          0.001736111111111111 * b4 - 0.0003472222222222222 * b5 +
          0.003472222222222222 * b6 - 0.01736111111111111 * b7 +
          0.03472222222222222 * b8 - 0.03472222222222222 * b9;
      QK_B_QKT[lind_qkbqkt + 12] =
          0.0006944444444444444 * b0 + 0.01805555555555556 * b1 +
          0.001388888888888889 * b10 - 0.004166666666666667 * b12 -
          0.1083333333333333 * b13 - 0.275 * b14 - 0.1083333333333333 * b15 -
          0.004166666666666667 * b16 + 0.001388888888888889 * b18 +
          0.03611111111111111 * b19 + 0.04583333333333333 * b2 +
          0.09166666666666667 * b20 + 0.03611111111111111 * b21 +
          0.001388888888888889 * b22 + 0.0006944444444444444 * b24 +
          0.01805555555555556 * b25 + 0.04583333333333333 * b26 +
          0.01805555555555556 * b27 + 0.0006944444444444444 * b28 +
          0.01805555555555556 * b3 + 0.0006944444444444444 * b4 +
          0.001388888888888889 * b6 + 0.03611111111111111 * b7 +
          0.09166666666666667 * b8 + 0.03611111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 13] =
          0.006944444444444444 * b10 - 0.03472222222222222 * b1 -
          0.003472222222222222 * b0 + 0.02083333333333333 * b12 +
          0.2083333333333333 * b13 - 0.2083333333333333 * b15 -
          0.02083333333333333 * b16 - 0.006944444444444444 * b18 -
          0.06944444444444444 * b19 + 0.06944444444444444 * b21 +
          0.006944444444444444 * b22 - 0.003472222222222222 * b24 -
          0.03472222222222222 * b25 + 0.03472222222222222 * b27 +
          0.003472222222222222 * b28 + 0.03472222222222222 * b3 +
          0.003472222222222222 * b4 - 0.006944444444444444 * b6 -
          0.06944444444444444 * b7 + 0.06944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 14] =
          0.006944444444444444 * b0 + 0.01388888888888889 * b1 +
          0.01388888888888889 * b10 - 0.04166666666666667 * b12 -
          0.08333333333333333 * b13 + 0.25 * b14 - 0.08333333333333333 * b15 -
          0.04166666666666667 * b16 + 0.01388888888888889 * b18 +
          0.02777777777777778 * b19 - 0.04166666666666667 * b2 -
          0.08333333333333333 * b20 + 0.02777777777777778 * b21 +
          0.01388888888888889 * b22 + 0.006944444444444444 * b24 +
          0.01388888888888889 * b25 - 0.04166666666666667 * b26 +
          0.01388888888888889 * b27 + 0.006944444444444444 * b28 +
          0.01388888888888889 * b3 + 0.006944444444444444 * b4 +
          0.01388888888888889 * b6 + 0.02777777777777778 * b7 -
          0.08333333333333333 * b8 + 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 15] =
          0.01388888888888889 * b1 - 0.006944444444444444 * b0 +
          0.01388888888888889 * b10 + 0.04166666666666667 * b12 -
          0.08333333333333333 * b13 + 0.08333333333333333 * b15 -
          0.04166666666666667 * b16 - 0.01388888888888889 * b18 +
          0.02777777777777778 * b19 - 0.02777777777777778 * b21 +
          0.01388888888888889 * b22 - 0.006944444444444444 * b24 +
          0.01388888888888889 * b25 - 0.01388888888888889 * b27 +
          0.006944444444444444 * b28 - 0.01388888888888889 * b3 +
          0.006944444444444444 * b4 - 0.01388888888888889 * b6 +
          0.02777777777777778 * b7 - 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 16] =
          0.003472222222222222 * b0 - 0.01388888888888889 * b1 +
          0.006944444444444444 * b10 - 0.02083333333333333 * b12 +
          0.08333333333333333 * b13 - 0.125 * b14 + 0.08333333333333333 * b15 -
          0.02083333333333333 * b16 + 0.006944444444444444 * b18 -
          0.02777777777777778 * b19 + 0.02083333333333333 * b2 +
          0.04166666666666667 * b20 - 0.02777777777777778 * b21 +
          0.006944444444444444 * b22 + 0.003472222222222222 * b24 -
          0.01388888888888889 * b25 + 0.02083333333333333 * b26 -
          0.01388888888888889 * b27 + 0.003472222222222222 * b28 -
          0.01388888888888889 * b3 + 0.003472222222222222 * b4 +
          0.006944444444444444 * b6 - 0.02777777777777778 * b7 +
          0.04166666666666667 * b8 - 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 17] =
          0.003472222222222222 * b1 - 0.0006944444444444444 * b0 -
          0.006944444444444444 * b10 + 0.001388888888888889 * b11 +
          0.004166666666666667 * b12 - 0.02083333333333333 * b13 +
          0.04166666666666667 * b14 - 0.04166666666666667 * b15 +
          0.02083333333333333 * b16 - 0.004166666666666667 * b17 -
          0.001388888888888889 * b18 + 0.006944444444444444 * b19 -
          0.006944444444444444 * b2 - 0.01388888888888889 * b20 +
          0.01388888888888889 * b21 - 0.006944444444444444 * b22 +
          0.001388888888888889 * b23 - 0.0006944444444444444 * b24 +
          0.003472222222222222 * b25 - 0.006944444444444444 * b26 +
          0.006944444444444444 * b27 - 0.003472222222222222 * b28 +
          0.0006944444444444444 * b29 + 0.006944444444444444 * b3 -
          0.003472222222222222 * b4 + 0.0006944444444444444 * b5 -
          0.001388888888888889 * b6 + 0.006944444444444444 * b7 -
          0.01388888888888889 * b8 + 0.01388888888888889 * b9;
      QK_B_QKT[lind_qkbqkt + 18] =
          0.001388888888888889 * b10 - 0.01805555555555556 * b1 -
          0.0006944444444444444 * b0 - 0.001388888888888889 * b18 -
          0.03611111111111111 * b19 - 0.04583333333333333 * b2 -
          0.09166666666666667 * b20 - 0.03611111111111111 * b21 -
          0.001388888888888889 * b22 + 0.0006944444444444444 * b24 +
          0.01805555555555556 * b25 + 0.04583333333333333 * b26 +
          0.01805555555555556 * b27 + 0.0006944444444444444 * b28 -
          0.01805555555555556 * b3 - 0.0006944444444444444 * b4 +
          0.001388888888888889 * b6 + 0.03611111111111111 * b7 +
          0.09166666666666667 * b8 + 0.03611111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 19] =
          0.003472222222222222 * b0 + 0.03472222222222222 * b1 +
          0.006944444444444444 * b10 + 0.006944444444444444 * b18 +
          0.06944444444444444 * b19 - 0.06944444444444444 * b21 -
          0.006944444444444444 * b22 - 0.003472222222222222 * b24 -
          0.03472222222222222 * b25 + 0.03472222222222222 * b27 +
          0.003472222222222222 * b28 - 0.03472222222222222 * b3 -
          0.003472222222222222 * b4 - 0.006944444444444444 * b6 -
          0.06944444444444444 * b7 + 0.06944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 20] =
          0.01388888888888889 * b10 - 0.01388888888888889 * b1 -
          0.006944444444444444 * b0 - 0.01388888888888889 * b18 -
          0.02777777777777778 * b19 + 0.04166666666666667 * b2 +
          0.08333333333333333 * b20 - 0.02777777777777778 * b21 -
          0.01388888888888889 * b22 + 0.006944444444444444 * b24 +
          0.01388888888888889 * b25 - 0.04166666666666667 * b26 +
          0.01388888888888889 * b27 + 0.006944444444444444 * b28 -
          0.01388888888888889 * b3 - 0.006944444444444444 * b4 +
          0.01388888888888889 * b6 + 0.02777777777777778 * b7 -
          0.08333333333333333 * b8 + 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 21] =
          0.006944444444444444 * b0 - 0.01388888888888889 * b1 +
          0.01388888888888889 * b10 + 0.01388888888888889 * b18 -
          0.02777777777777778 * b19 + 0.02777777777777778 * b21 -
          0.01388888888888889 * b22 - 0.006944444444444444 * b24 +
          0.01388888888888889 * b25 - 0.01388888888888889 * b27 +
          0.006944444444444444 * b28 + 0.01388888888888889 * b3 -
          0.006944444444444444 * b4 - 0.01388888888888889 * b6 +
          0.02777777777777778 * b7 - 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 22] =
          0.01388888888888889 * b1 - 0.003472222222222222 * b0 +
          0.006944444444444444 * b10 - 0.006944444444444444 * b18 +
          0.02777777777777778 * b19 - 0.02083333333333333 * b2 -
          0.04166666666666667 * b20 + 0.02777777777777778 * b21 -
          0.006944444444444444 * b22 + 0.003472222222222222 * b24 -
          0.01388888888888889 * b25 + 0.02083333333333333 * b26 -
          0.01388888888888889 * b27 + 0.003472222222222222 * b28 +
          0.01388888888888889 * b3 - 0.003472222222222222 * b4 +
          0.006944444444444444 * b6 - 0.02777777777777778 * b7 +
          0.04166666666666667 * b8 - 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 23] =
          0.0006944444444444444 * b0 - 0.003472222222222222 * b1 -
          0.006944444444444444 * b10 + 0.001388888888888889 * b11 +
          0.001388888888888889 * b18 - 0.006944444444444444 * b19 +
          0.006944444444444444 * b2 + 0.01388888888888889 * b20 -
          0.01388888888888889 * b21 + 0.006944444444444444 * b22 -
          0.001388888888888889 * b23 - 0.0006944444444444444 * b24 +
          0.003472222222222222 * b25 - 0.006944444444444444 * b26 +
          0.006944444444444444 * b27 - 0.003472222222222222 * b28 +
          0.0006944444444444444 * b29 - 0.006944444444444444 * b3 +
          0.003472222222222222 * b4 - 0.0006944444444444444 * b5 -
          0.001388888888888889 * b6 + 0.006944444444444444 * b7 -
          0.01388888888888889 * b8 + 0.01388888888888889 * b9;
      QK_B_QKT[lind_qkbqkt + 24] =
          0.0003472222222222222 * b0 + 0.009027777777777778 * b1 -
          0.001388888888888889 * b10 + 0.002083333333333333 * b12 +
          0.05416666666666667 * b13 + 0.1375 * b14 + 0.05416666666666667 * b15 +
          0.002083333333333333 * b16 - 0.001388888888888889 * b18 -
          0.03611111111111111 * b19 + 0.02291666666666667 * b2 -
          0.09166666666666667 * b20 - 0.03611111111111111 * b21 -
          0.001388888888888889 * b22 + 0.0003472222222222222 * b24 +
          0.009027777777777778 * b25 + 0.02291666666666667 * b26 +
          0.009027777777777778 * b27 + 0.0003472222222222222 * b28 +
          0.009027777777777778 * b3 + 0.0003472222222222222 * b4 -
          0.001388888888888889 * b6 - 0.03611111111111111 * b7 -
          0.09166666666666667 * b8 - 0.03611111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 25] =
          0.1041666666666667 * b15 - 0.01736111111111111 * b1 -
          0.006944444444444444 * b10 - 0.01041666666666667 * b12 -
          0.1041666666666667 * b13 - 0.001736111111111111 * b0 +
          0.01041666666666667 * b16 + 0.006944444444444444 * b18 +
          0.06944444444444444 * b19 - 0.06944444444444444 * b21 -
          0.006944444444444444 * b22 - 0.001736111111111111 * b24 -
          0.01736111111111111 * b25 + 0.01736111111111111 * b27 +
          0.001736111111111111 * b28 + 0.01736111111111111 * b3 +
          0.001736111111111111 * b4 + 0.006944444444444444 * b6 +
          0.06944444444444444 * b7 - 0.06944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 26] =
          0.003472222222222222 * b0 + 0.006944444444444444 * b1 -
          0.01388888888888889 * b10 + 0.02083333333333333 * b12 +
          0.04166666666666667 * b13 - 0.125 * b14 + 0.04166666666666667 * b15 +
          0.02083333333333333 * b16 - 0.01388888888888889 * b18 -
          0.02777777777777778 * b19 - 0.02083333333333333 * b2 +
          0.08333333333333333 * b20 - 0.02777777777777778 * b21 -
          0.01388888888888889 * b22 + 0.003472222222222222 * b24 +
          0.006944444444444444 * b25 - 0.02083333333333333 * b26 +
          0.006944444444444444 * b27 + 0.003472222222222222 * b28 +
          0.006944444444444444 * b3 + 0.003472222222222222 * b4 -
          0.01388888888888889 * b6 - 0.02777777777777778 * b7 +
          0.08333333333333333 * b8 - 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 27] =
          0.006944444444444444 * b1 - 0.003472222222222222 * b0 -
          0.01388888888888889 * b10 - 0.02083333333333333 * b12 +
          0.04166666666666667 * b13 - 0.04166666666666667 * b15 +
          0.02083333333333333 * b16 + 0.01388888888888889 * b18 -
          0.02777777777777778 * b19 + 0.02777777777777778 * b21 -
          0.01388888888888889 * b22 - 0.003472222222222222 * b24 +
          0.006944444444444444 * b25 - 0.006944444444444444 * b27 +
          0.003472222222222222 * b28 - 0.006944444444444444 * b3 +
          0.003472222222222222 * b4 + 0.01388888888888889 * b6 -
          0.02777777777777778 * b7 + 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 28] =
          0.001736111111111111 * b0 - 0.006944444444444444 * b1 -
          0.006944444444444444 * b10 + 0.01041666666666667 * b12 -
          0.04166666666666667 * b13 + 0.0625 * b14 - 0.04166666666666667 * b15 +
          0.01041666666666667 * b16 - 0.006944444444444444 * b18 +
          0.02777777777777778 * b19 + 0.01041666666666667 * b2 -
          0.04166666666666667 * b20 + 0.02777777777777778 * b21 -
          0.006944444444444444 * b22 + 0.001736111111111111 * b24 -
          0.006944444444444444 * b25 + 0.01041666666666667 * b26 -
          0.006944444444444444 * b27 + 0.001736111111111111 * b28 -
          0.006944444444444444 * b3 + 0.001736111111111111 * b4 -
          0.006944444444444444 * b6 + 0.02777777777777778 * b7 -
          0.04166666666666667 * b8 + 0.02777777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 29] =
          0.001736111111111111 * b1 - 0.0003472222222222222 * b0 +
          0.006944444444444444 * b10 - 0.001388888888888889 * b11 -
          0.002083333333333333 * b12 + 0.01041666666666667 * b13 -
          0.02083333333333333 * b14 + 0.02083333333333333 * b15 -
          0.01041666666666667 * b16 + 0.002083333333333333 * b17 +
          0.001388888888888889 * b18 - 0.006944444444444444 * b19 -
          0.003472222222222222 * b2 + 0.01388888888888889 * b20 -
          0.01388888888888889 * b21 + 0.006944444444444444 * b22 -
          0.001388888888888889 * b23 - 0.0003472222222222222 * b24 +
          0.001736111111111111 * b25 - 0.003472222222222222 * b26 +
          0.003472222222222222 * b27 - 0.001736111111111111 * b28 +
          0.0003472222222222222 * b29 + 0.003472222222222222 * b3 -
          0.001736111111111111 * b4 + 0.0003472222222222222 * b5 +
          0.001388888888888889 * b6 - 0.006944444444444444 * b7 +
          0.01388888888888889 * b8 - 0.01388888888888889 * b9;
      QK_B_QKT[lind_qkbqkt + 30] =
          0.0003472222222222222 * b10 - 0.001805555555555556 * b1 -
          0.00006944444444444444 * b0 - 0.0006944444444444444 * b12 -
          0.01805555555555556 * b13 - 0.04583333333333333 * b14 -
          0.01805555555555556 * b15 - 0.0006944444444444444 * b16 +
          0.0006944444444444444 * b18 + 0.01805555555555556 * b19 -
          0.004583333333333333 * b2 + 0.04583333333333333 * b20 +
          0.01805555555555556 * b21 + 0.0006944444444444444 * b22 -
          0.0003472222222222222 * b24 - 0.009027777777777778 * b25 -
          0.02291666666666667 * b26 - 0.009027777777777778 * b27 -
          0.0003472222222222222 * b28 - 0.001805555555555556 * b3 +
          0.00006944444444444444 * b30 + 0.001805555555555556 * b31 +
          0.004583333333333333 * b32 + 0.001805555555555556 * b33 +
          0.00006944444444444444 * b34 - 0.00006944444444444444 * b4 +
          0.0003472222222222222 * b6 + 0.009027777777777778 * b7 +
          0.02291666666666667 * b8 + 0.009027777777777778 * b9;
      QK_B_QKT[lind_qkbqkt + 31] =
          0.0003472222222222222 * b0 + 0.003472222222222222 * b1 +
          0.001736111111111111 * b10 + 0.003472222222222222 * b12 +
          0.03472222222222222 * b13 - 0.03472222222222222 * b15 -
          0.003472222222222222 * b16 - 0.003472222222222222 * b18 -
          0.03472222222222222 * b19 + 0.03472222222222222 * b21 +
          0.003472222222222222 * b22 + 0.001736111111111111 * b24 +
          0.01736111111111111 * b25 - 0.01736111111111111 * b27 -
          0.001736111111111111 * b28 - 0.003472222222222222 * b3 -
          0.0003472222222222222 * b30 - 0.003472222222222222 * b31 +
          0.003472222222222222 * b33 + 0.0003472222222222222 * b34 -
          0.0003472222222222222 * b4 - 0.001736111111111111 * b6 -
          0.01736111111111111 * b7 + 0.01736111111111111 * b9;
      QK_B_QKT[lind_qkbqkt + 32] =
          0.003472222222222222 * b10 - 0.001388888888888889 * b1 -
          0.0006944444444444444 * b0 - 0.006944444444444444 * b12 -
          0.01388888888888889 * b13 + 0.04166666666666667 * b14 -
          0.01388888888888889 * b15 - 0.006944444444444444 * b16 +
          0.006944444444444444 * b18 + 0.01388888888888889 * b19 +
          0.004166666666666667 * b2 - 0.04166666666666667 * b20 +
          0.01388888888888889 * b21 + 0.006944444444444444 * b22 -
          0.003472222222222222 * b24 - 0.006944444444444444 * b25 +
          0.02083333333333333 * b26 - 0.006944444444444444 * b27 -
          0.003472222222222222 * b28 - 0.001388888888888889 * b3 +
          0.0006944444444444444 * b30 + 0.001388888888888889 * b31 -
          0.004166666666666667 * b32 + 0.001388888888888889 * b33 +
          0.0006944444444444444 * b34 - 0.0006944444444444444 * b4 +
          0.003472222222222222 * b6 + 0.006944444444444444 * b7 -
          0.02083333333333333 * b8 + 0.006944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 33] =
          0.0006944444444444444 * b0 - 0.001388888888888889 * b1 +
          0.003472222222222222 * b10 + 0.006944444444444444 * b12 -
          0.01388888888888889 * b13 + 0.01388888888888889 * b15 -
          0.006944444444444444 * b16 - 0.006944444444444444 * b18 +
          0.01388888888888889 * b19 - 0.01388888888888889 * b21 +
          0.006944444444444444 * b22 + 0.003472222222222222 * b24 -
          0.006944444444444444 * b25 + 0.006944444444444444 * b27 -
          0.003472222222222222 * b28 + 0.001388888888888889 * b3 -
          0.0006944444444444444 * b30 + 0.001388888888888889 * b31 -
          0.001388888888888889 * b33 + 0.0006944444444444444 * b34 -
          0.0006944444444444444 * b4 - 0.003472222222222222 * b6 +
          0.006944444444444444 * b7 - 0.006944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 34] =
          0.001388888888888889 * b1 - 0.0003472222222222222 * b0 +
          0.001736111111111111 * b10 - 0.003472222222222222 * b12 +
          0.01388888888888889 * b13 - 0.02083333333333333 * b14 +
          0.01388888888888889 * b15 - 0.003472222222222222 * b16 +
          0.003472222222222222 * b18 - 0.01388888888888889 * b19 -
          0.002083333333333333 * b2 + 0.02083333333333333 * b20 -
          0.01388888888888889 * b21 + 0.003472222222222222 * b22 -
          0.001736111111111111 * b24 + 0.006944444444444444 * b25 -
          0.01041666666666667 * b26 + 0.006944444444444444 * b27 -
          0.001736111111111111 * b28 + 0.001388888888888889 * b3 +
          0.0003472222222222222 * b30 - 0.001388888888888889 * b31 +
          0.002083333333333333 * b32 - 0.001388888888888889 * b33 +
          0.0003472222222222222 * b34 - 0.0003472222222222222 * b4 +
          0.001736111111111111 * b6 - 0.006944444444444444 * b7 +
          0.01041666666666667 * b8 - 0.006944444444444444 * b9;
      QK_B_QKT[lind_qkbqkt + 35] =
          0.00006944444444444444 * b0 - 0.0003472222222222222 * b1 -
          0.001736111111111111 * b10 + 0.0003472222222222222 * b11 +
          0.0006944444444444444 * b12 - 0.003472222222222222 * b13 +
          0.006944444444444444 * b14 - 0.006944444444444444 * b15 +
          0.003472222222222222 * b16 - 0.0006944444444444444 * b17 -
          0.0006944444444444444 * b18 + 0.003472222222222222 * b19 +
          0.0006944444444444444 * b2 - 0.006944444444444444 * b20 +
          0.006944444444444444 * b21 - 0.003472222222222222 * b22 +
          0.0006944444444444444 * b23 + 0.0003472222222222222 * b24 -
          0.001736111111111111 * b25 + 0.003472222222222222 * b26 -
          0.003472222222222222 * b27 + 0.001736111111111111 * b28 -
          0.0003472222222222222 * b29 - 0.0006944444444444444 * b3 -
          0.00006944444444444444 * b30 + 0.0003472222222222222 * b31 -
          0.0006944444444444444 * b32 + 0.0006944444444444444 * b33 -
          0.0003472222222222222 * b34 + 0.00006944444444444444 * b35 +
          0.0003472222222222222 * b4 - 0.00006944444444444444 * b5 -
          0.0003472222222222222 * b6 + 0.001736111111111111 * b7 -
          0.003472222222222222 * b8 + 0.003472222222222222 * b9;
    }
  }
  //std::ofstream outFile1("./outputqkbqkt-bd.txt");
  //for (const auto &e : QK_B_QKT) outFile1 << e << "\n";
}

void Dic::setCurrentImages(std::size_t n, std::vector<DicImage> list) {
  this->currentImagesCount = n;
  this->currentImages = list;
}

DicImage Dic::getReferenceImage() { return referenceImage; }

std::size_t Dic::getCurrentImagesCount() { return currentImagesCount; }

DicImage Dic::getCurrentImage(std::size_t i) { return currentImages[i]; }

void Dic::setParams(Params params) { this->params = params; }

void Dic::matchSeed(std::size_t currentIndex) {
  double maxCorrelation = 0.0, correlation;
  std::pair<int, int> match, candidate;
  std::vector<double> serialSeed =
      serializeSubset(referenceImage, params.seedPoint);
  for (int i = 0; i < currentImages[currentIndex].getHeight(); i++) {
    for (int j = 0; j < currentImages[currentIndex].getWidth(); j++) {
      candidate = std::make_pair(i, j);
      correlation = Utils::ncc(
          serialSeed, serializeSubset(currentImages[currentIndex], candidate));
      if (correlation > maxCorrelation) {
        match = candidate;
        maxCorrelation = correlation;
      }
    }
  }
  qDebug() <<  QString("for %1 th current image, found match at {%2, %3} with correlation = %4")
               .arg(currentIndex)
               .arg(match.first)
               .arg(match.second)
               .arg(maxCorrelation);
}

std::vector<double> Dic::serializeSubset(DicImage &image,
                                         std::pair<int, int> center) {
  unsigned long xMin = 0;
  unsigned long xMax = static_cast<unsigned long>(image.getWidth()) - 1;
  unsigned long yMin = 0;
  unsigned long yMax = static_cast<unsigned long>(image.getHeight()) - 1;
  unsigned long side = static_cast<unsigned long>(params.subsetSize);
  unsigned long xStart = static_cast<unsigned long>(center.first) - side / 2;
  unsigned long yStart = static_cast<unsigned long>(center.second) - side / 2;
  unsigned long x;
  unsigned long y;
  std::vector<double> res(static_cast<size_t>(side * side), 0.0);

  if (xStart < xMin or yStart < yMin or xStart + side - 1 > xMax or
      yStart + side - 1 > yMax) {
    std::vector<double> empty;
    return empty;
  }
  x = xStart;
  for (size_t i = 0; i < side; i++, x++) {
    y = yStart;
    for (size_t j = 0; j < side; j++, y++) {
      res[i * side + j] = static_cast<double>(
          image.getValue(static_cast<int>(x), static_cast<int>(y)));
    }
  }
  return res;
}

Dic::~Dic() { currentImages.clear(); }
